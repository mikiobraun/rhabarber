// Template generated by maketempl from file ../../include/ctmpl/list.tmpl
//
// maketempl has been written by Mikio Braun, 2005
// mikio@first.fraunhofer.de
//

#ifndef LISTOBJECT
#define LISTOBJECT

#include "alloc.h"
#include "object.h"

#line 17 "../../include/ctmpl/list.tmpl"

#include <stdbool.h>

struct nodeobject {
  struct nodeobject *next;
  struct nodeobject *prev;
  object_t data;
};

struct listobject {
  int len;
  struct nodeobject *first;
  struct nodeobject *last;
};

// Basic access
typedef struct listobject listobject_t;
typedef struct nodeobject *listobject_iterator_t;
typedef void listobject_proc(object_t data);

extern void listobject_init(listobject_t *l);
extern void listobject_clear(listobject_t *l);

extern void listobject_append(listobject_t *l, object_t data);
extern void listobject_prepend(listobject_t *l, object_t data);
extern void listobject_appendlist(listobject_t *l1, listobject_t *l2);

extern object_t listobject_remove(listobject_t *l);
extern object_t listobject_pop(listobject_t *l);

extern object_t listobject_front(listobject_t *l);
extern object_t listobject_last(listobject_t *l);

extern bool listobject_isempty(listobject_t *l);
extern int listobject_length(listobject_t *l);

// in case == makes sense
extern void listobject_uniquecopyappendlist(listobject_t *l1, listobject_t *l2);
extern void listobject_uniqueappend(listobject_t *l, object_t data);
extern bool listobject_ismember(listobject_t *l, object_t data);

// Iterating
extern void listobject_foreach(listobject_t *l, listobject_proc *p);

extern void listobject_begin(listobject_iterator_t *i, listobject_t *l);
extern listobject_iterator_t listobject_iterator(listobject_t *l);
extern bool listobject_done(listobject_iterator_t *i); 
extern void listobject_next(listobject_iterator_t *i);
extern object_t listobject_get(listobject_iterator_t *i);
extern void listobject_set(listobject_iterator_t *i, object_t data);


#endif
