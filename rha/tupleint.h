// Template generated by maketempl from file ../../include/ctmpl/tuple.tmpl
//
// maketempl has been written by Mikio Braun, 2005
// mikio@first.fraunhofer.de
//

#ifndef TUPLEINT
#define TUPLEINT

#include "alloc.h"

#line 17 "../../include/ctmpl/tuple.tmpl"

struct tupleint {
  int len;
  int *array;
};

typedef struct tupleint tupleint_t;
typedef void tupleint_proc(int v);

extern void tupleint_init(tupleint_t *t, int len);
extern void tupleint_initto(tupleint_t *t, int len, int x);
extern void tupleint_copy(tupleint_t *t, tupleint_t *t2);
extern void tupleint_clear(tupleint_t *t);
extern void tupleint_foreach(tupleint_t *t, tupleint_proc *fct);

extern int tupleint_length(tupleint_t *t);
extern void tupleint_set(tupleint_t *t, int i, int x);
extern int tupleint_get(tupleint_t *t, int i);
extern int* tupleint_array(tupleint_t *t);

// this is just stuff which maybe exists
#ifdef _NOT_YET_
#include "listint.h"

extern void tupleint_fromlist(tupleint_t *t, listint_t *list);

#ifdef USE_INLINES
extern inline
int tupleint_length(tupleint_t *t)
{
  return t->len;
}

extern inline
void tupleint_set(tupleint_t *t, int i, int x)
{
  t->array[i] = x;
}	

extern inline
int tupleint_get(tupleint_t *t, int i)
{
  return t->array[i];
}	

extern inline
int *tupleint_array(tupleint_t *t)
{
  return t->array;
}
#endif // USE_INLINES

#endif


#endif
