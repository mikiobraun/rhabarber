// Template generated by maketempl from file ../../include/ctmpl/tree.tmpl
//
// maketempl has been written by Mikio Braun, 2005
// mikio@first.fraunhofer.de
//

#ifndef TREEOBJECTOBJECT
#define TREEOBJECTOBJECT

#include "alloc.h"
#include "tuple_tr.h"

#line 18 "../../include/ctmpl/tree.tmpl"
#include <stdbool.h>
#include <stdio.h>
#include <string.h>


struct treeobjectobject_treenode {
  enum {treeobjectobject_RED, treeobjectobject_BLACK} color;
  object_t key;
  object_t value;
  struct treeobjectobject_treenode *left;
  struct treeobjectobject_treenode *right;
  struct treeobjectobject_treenode *p;      // parent
};


typedef struct treeobjectobject_ {
  struct treeobjectobject_treenode *root;
  int size;
} treeobjectobject_t;

struct treeobjectobject_iterstack {
  enum {treeobjectobject_LEFT, treeobjectobject_RIGHT} state;
  struct treeobjectobject_iterstack *prev;
};

typedef struct {
  struct treeobjectobject_treenode *c;
  struct treeobjectobject_iterstack *hist;
} treeobjectobject_iterator_t;

extern int treeobjectobject_lastsearchdepth;

extern void treeobjectobject_init(treeobjectobject_t *t);
// creates the empty tree

extern void treeobjectobject_print(treeobjectobject_t *t);
// prints the t in order

extern void treeobjectobject_clear(treeobjectobject_t *t);
// clears t

extern bool treeobjectobject_isempty(treeobjectobject_t *t);
// is the tree empty?

extern int treeobjectobject_size(treeobjectobject_t *t);
// size of the tree

extern object_t treeobjectobject_search(treeobjectobject_t *x, object_t key);
// finds the key in x and return its value
// or NULL if not found (e.g. if x is empty)
// note that also value might be NULL

extern void treeobjectobject_insert(treeobjectobject_t *t, object_t key, object_t value);
// inserts (key,value) into t

extern object_t treeobjectobject_delete(treeobjectobject_t *t, object_t key);
// deletes key in t and returns its value

// Iterating
extern void treeobjectobject_begin(treeobjectobject_iterator_t *i, treeobjectobject_t *t);
extern bool treeobjectobject_done(treeobjectobject_iterator_t *i);
extern void treeobjectobject_next(treeobjectobject_iterator_t *i);
extern object_t treeobjectobject_get_key(treeobjectobject_iterator_t *i);
extern object_t treeobjectobject_get_value(treeobjectobject_iterator_t *i);


#endif
