// Template generated by maketempl from file ../../include/ctmpl/tuple.tmpl
//
// maketempl has been written by Mikio Braun, 2005
// mikio@first.fraunhofer.de
//

#ifndef TUPLEOBJECT
#define TUPLEOBJECT

#include "alloc.h"
#include "object.h"

#line 17 "../../include/ctmpl/tuple.tmpl"

struct tupleobject {
  int len;
  object_t *array;
};

typedef struct tupleobject tupleobject_t;
typedef void tupleobject_proc(object_t v);

extern void tupleobject_init(tupleobject_t *t, int len);
extern void tupleobject_initto(tupleobject_t *t, int len, object_t x);
extern void tupleobject_copy(tupleobject_t *t, tupleobject_t *t2);
extern void tupleobject_clear(tupleobject_t *t);
extern void tupleobject_foreach(tupleobject_t *t, tupleobject_proc *fct);

extern int tupleobject_length(tupleobject_t *t);
extern void tupleobject_set(tupleobject_t *t, int i, object_t x);
extern object_t tupleobject_get(tupleobject_t *t, int i);
extern object_t* tupleobject_array(tupleobject_t *t);

// this is just stuff which maybe exists
#ifdef _NOT_YET_
#include "listobject.h"

extern void tupleobject_fromlist(tupleobject_t *t, listobject_t *list);

#ifdef USE_INLINES
extern inline
int tupleobject_length(tupleobject_t *t)
{
  return t->len;
}

extern inline
void tupleobject_set(tupleobject_t *t, int i, object_t x)
{
  t->array[i] = x;
}	

extern inline
object_t tupleobject_get(tupleobject_t *t, int i)
{
  return t->array[i];
}	

extern inline
object_t *tupleobject_array(tupleobject_t *t)
{
  return t->array;
}
#endif // USE_INLINES

#endif


#endif
