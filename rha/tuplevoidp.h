// Template generated by maketempl from file ../../include/ctmpl/tuple.tmpl
//
// maketempl has been written by Mikio Braun, 2005
// mikio@first.fraunhofer.de
//

#ifndef TUPLEVOIDP
#define TUPLEVOIDP

#include "alloc.h"
#include "voidp_defs.h"

#line 17 "../../include/ctmpl/tuple.tmpl"

struct tuplevoidp {
  int len;
  voidp *array;
};

typedef struct tuplevoidp tuplevoidp_t;
typedef void tuplevoidp_proc(voidp v);

extern void tuplevoidp_init(tuplevoidp_t *t, int len);
extern void tuplevoidp_initto(tuplevoidp_t *t, int len, voidp x);
extern void tuplevoidp_copy(tuplevoidp_t *t, tuplevoidp_t *t2);
extern void tuplevoidp_clear(tuplevoidp_t *t);
extern void tuplevoidp_foreach(tuplevoidp_t *t, tuplevoidp_proc *fct);

extern int tuplevoidp_length(tuplevoidp_t *t);
extern void tuplevoidp_set(tuplevoidp_t *t, int i, voidp x);
extern voidp tuplevoidp_get(tuplevoidp_t *t, int i);
extern voidp* tuplevoidp_array(tuplevoidp_t *t);

// this is just stuff which maybe exists
#ifdef _NOT_YET_
#include "listvoidp.h"

extern void tuplevoidp_fromlist(tuplevoidp_t *t, listvoidp_t *list);

#ifdef USE_INLINES
extern inline
int tuplevoidp_length(tuplevoidp_t *t)
{
  return t->len;
}

extern inline
void tuplevoidp_set(tuplevoidp_t *t, int i, voidp x)
{
  t->array[i] = x;
}	

extern inline
voidp tuplevoidp_get(tuplevoidp_t *t, int i)
{
  return t->array[i];
}	

extern inline
voidp *tuplevoidp_array(tuplevoidp_t *t)
{
  return t->array;
}
#endif // USE_INLINES

#endif


#endif
