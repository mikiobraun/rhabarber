/* -*- C -*- */
%{
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "rhalexer.h"
#include "symbol_tr.h"
#include "bool_tr.h"
#include "int_tr.h"
#include "real_tr.h"
#include "string_tr.h"
#define YYSTYPE object_t /* is this really correct? */
#include "rhaparser.tab.h"

char *escexpand(char *);
%}

%%
("op"([+*-/<>!]|"<="|">="|"&&"|"||"|"!="|"==")) {
                          yylval = symbol_new(yytext); return SYMBOL; 
                        }
\\			return BS;      /* single back slash */
"("			return LRP;     /* round paren */
")"			return RRP;
"{"			return LCP;     /* curly paren */
"}"			return RCP;
"["			return LSP;     /* squared paren */
"]"			return RSP;
","                     return COMMA;
";"                     return SEMIC;
":"                     return COLON;
"->"                    return MAPS;
":-"                    return ENTAILS;
"."                     return DOT;
".!"                   return NOBINDDOT;
"?"                     return QUEST;
"="                     return ASSIGN;
"=?"                     return SNATCH;
"+"                     return PLUS;
"-"                     return MINUS;
"*"                     return TIMES;
"/"                     return DIVIDE;
"<"                     return LESS;
"<="                    return LESSEQUAL;
">"                     return GREATER;
">="                    return GREATEREQUAL;
"=="                    return EQUAL;
"!="                    return NOTEQUAL;
"++"                    return PLUSPLUS;
"--"                    return MINUSMINUS;
"+="                    return PLUSASSIGN;
"-="                    return MINUSASSIGN;
"*="                    return TIMESASSIGN;
"/="                    return DIVIDEASSIGN;
"&&"                    return AND;
"||"                    return OR;
"!"                     return NOT;
"false"                 { yylval = bool_new(false); return BOOL; }
"true"                  { yylval = bool_new(true); return BOOL; }
[@#a-zA-Z_][a-zA-Z0-9_]* { 
                           yylval = symbol_new(yytext); return SYMBOL; 
                        }
\"[^\"]*\"		{ 
                           yytext[strlen(yytext) - 1] = 0;
                           yylval = string_new(escexpand(yytext + 1));
                           return STRING;
                        }
[0-9]+			{ yylval = int_new(atoi(yytext)); return INT; }
([0-9]+\.[0-9])|([0-9]*\.[0-9]+) { yylval = real_new(atof(yytext)); return REAL; }
[ \t]+			/* eat up white spaces */
\n			yylineno++;
"//".*                  /* eat up comment */
.			printf("Warning: Unrecognized character \"%s\"\n", yytext);
<<EOF>>			yyterminate();
%%
YY_BUFFER_STATE currentbuffer;
int yylineno;


void beginstringparse(const char *s)
{
  currentbuffer = yy_scan_string(s);
  yylineno = 1;
}


void endparse()
{
  yy_delete_buffer(currentbuffer);
}


void beginfileparse(FILE *f)
{
  currentbuffer = yy_create_buffer(f, YY_BUF_SIZE);
  yy_switch_to_buffer(currentbuffer);  
  yylineno = 1;
}

void thisfunctioncallsyyunputsowillyoupleaseshutupnowgcc()
{
  yyunput(1, 0);
}

char *escexpand(char *in)
{
  int l = strlen(in);
  char *out = ALLOC_RAW(l+1);
  char *p = out;

  while(*in) {
    if (*in == '\\') {
      switch(*++in) {
      case 'n': *p++ = '\n'; break;
      case 't': *p++ = '\t'; break;
      default: *p++ = '\\';
	*p++ = *in;
      }
      in++;
    }
    else
      *p++ = *in++;
  }
  *p++ = '\0';
  return out;
}
