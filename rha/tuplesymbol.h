// Template generated by maketempl from file ../../include/ctmpl/tuple.tmpl
//
// maketempl has been written by Mikio Braun, 2005
// mikio@first.fraunhofer.de
//

#ifndef TUPLESYMBOL
#define TUPLESYMBOL

#include "alloc.h"
#include "symbol_tr.h"

#line 17 "../../include/ctmpl/tuple.tmpl"

struct tuplesymbol {
  int len;
  symbol_tr *array;
};

typedef struct tuplesymbol tuplesymbol_t;
typedef void tuplesymbol_proc(symbol_tr v);

extern void tuplesymbol_init(tuplesymbol_t *t, int len);
extern void tuplesymbol_initto(tuplesymbol_t *t, int len, symbol_tr x);
extern void tuplesymbol_copy(tuplesymbol_t *t, tuplesymbol_t *t2);
extern void tuplesymbol_clear(tuplesymbol_t *t);
extern void tuplesymbol_foreach(tuplesymbol_t *t, tuplesymbol_proc *fct);

extern int tuplesymbol_length(tuplesymbol_t *t);
extern void tuplesymbol_set(tuplesymbol_t *t, int i, symbol_tr x);
extern symbol_tr tuplesymbol_get(tuplesymbol_t *t, int i);
extern symbol_tr* tuplesymbol_array(tuplesymbol_t *t);

// this is just stuff which maybe exists
#ifdef _NOT_YET_
#include "listsymbol.h"

extern void tuplesymbol_fromlist(tuplesymbol_t *t, listsymbol_t *list);

#ifdef USE_INLINES
extern inline
int tuplesymbol_length(tuplesymbol_t *t)
{
  return t->len;
}

extern inline
void tuplesymbol_set(tuplesymbol_t *t, int i, symbol_tr x)
{
  t->array[i] = x;
}	

extern inline
symbol_tr tuplesymbol_get(tuplesymbol_t *t, int i)
{
  return t->array[i];
}	

extern inline
symbol_tr *tuplesymbol_array(tuplesymbol_t *t)
{
  return t->array;
}
#endif // USE_INLINES

#endif


#endif
