// WARNING: don't edit here!  
// This file has been automatically generated by 'rha_config.pl'.
// Instead edit 'rha_config.d'.

#ifndef DATATYPES_H
#define DATATYPES_H

// (0) use the keyword to mark the datatypes and function in
// 'rha_config.d' that should be accessible in Rhabarber
#define _rha_

// (1) datatypes which are available in Rhabarber
#include <stdbool.h>
typedef int _rha_ symbol_t;
typedef void* _rha_ object_t;
typedef struct { 
  void *code;        // pointer to the code
  int_t narg;        // number of arguments
  int_t *argtypes[]; // array of the arg types
} _rha_ fn_t;
typedef bool _rha_ bool_t;
typedef int _rha_ int_t;
typedef double _rha_ real_t;
typedef double * _rha_ mat_t;


// (2) primtype id for all types
enum ptypes {
  SYMBOL_T_t = 1,
  OBJECT_T_t = 2,
  FN_T_t = 3,
  BOOL_T_t = 4,
  INT_T_t = 5,
  REAL_T_t = 6,
  MAT_T_t = 7
}


// (3) prototypes for all types
extern object_t symbol_proto;
extern object_t object_proto;
extern object_t fn_proto;
extern object_t bool_proto;
extern object_t int_proto;
extern object_t real_proto;
extern object_t mat_proto;


// (4) type objects
extern object_t void_obj;
extern object_t symbol_obj;
extern object_t object_obj;
extern object_t fn_obj;
extern object_t bool_obj;
extern object_t int_obj;
extern object_t real_obj;
extern object_t mat_obj;


// (5) symbols
extern symbol_t object_sym;
extern symbol_t int_sym;
extern symbol_t bool_fn_sym;
extern symbol_t bool_not_sym;
extern symbol_t include_sym;
extern symbol_t ls_sym;
extern symbol_t void_sym;
extern symbol_t print_sym;
extern symbol_t rmslot_sym;
extern symbol_t local_sym;
extern symbol_t clone_sym;
extern symbol_t quote_sym;
extern symbol_t root_sym;
extern symbol_t new_sym;
extern symbol_t real_sym;
extern symbol_t fn_sym;
extern symbol_t eval_sym;
extern symbol_t this_sym;
extern symbol_t lsall_sym;
extern symbol_t symbol_sym;
extern symbol_t proto_sym;
extern symbol_t bool_sym;
extern symbol_t subscribe_sym;
extern symbol_t bool_equal_sym;
extern symbol_t lookup_sym;
extern symbol_t ptype_sym;
extern symbol_t bool_to_string_sym;
extern symbol_t assign_sym;
extern symbol_t mat_sym;


// (6) some useful macros
// get the raw data and convert
//
// for example, raw(int_t, o)
#define RAW(tp, o) ((tp*)(o->raw))
#define ASSERT_RAW_NONZERO(o) assert(raw(o) != 0)

#endif
