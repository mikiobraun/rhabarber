// put all testing code here!

test("equalequal test");
check(17==17);
check("test"=="test");
check(void==void);
check(void!=15);
check("test"!=66);
check("test"!="tests");
summarize();


test("proxy tests");
a = 17;
b = proxy(\a);
check(a==b);
a = 42;
check(a==b);
a.xxx = "a new slot";
check(has(b, \xxx));
b.yyy = "another slot";
check(has(a, \yyy));
summarize();

test("arithmetic test");
check(17+42 == 59);
check(17-42 == -25);
check(17*42 == 714);
check(42/17 == 2);
summarize();

test("tuple test");
x = tuple.new(4);
check(x.len() == 4);
x.set(0, 42);
x.set(1, "seventeen");
check(x.get(0) == 42);
check(x.get(1) == "seventeen");
check(x.len() == 4);
summarize();

test("for loop test");
x = tuple.new(4);
x.set(0, 55);
x.set(1, 33);
x.set(2, 42);
x.set(3, -5);
y = 0;
for (i in x) y += i;
check(y==125);
summarize();


test("list test");
l = list();
l.append(17);
l.append(42);
y = 111;
for (x in l) y += x;
check(y == 170);
summarize();

//test("return test");
//x = (fn () { y = new(); y.a = 17; return y; z == zz })();
//check(x.a == 17);
//summarize();

//test("deliver test");
//x = { y = new(); y.a = 17; deliver y; z == zz };
//check(x.a == 17);
//summarize();

//test("break test");
//for (i in 0:5)
//  if (i==2) break;
//check(i == 2);
//summarize();

test("colon test");
x = tuple(5);
x.set(0, 5);
x.set(1, 6);
x.set(2, 7);
x.set(3, 8);
x.set(4, 9);
y = 5:10;
check(y.len() == 5);
for (i in 0:5)
  check(x.get(i) == y.get(i));
summarize();

test("multiple arguments");
f = new();
f(x) = 1+1;
f(x,y) = 2+2;
f(x,y,z) = 3+3;
f() = 0;
check(f() == 0);
check(f(5,3) == 4);
check(f(1) == 2);
check(f(5,6,2) == 6);
summarize();


// special parsing test
{ x = 0 }
if (0==0) {
  1;
}
else {
  2
}
// next 'then' without semicolon
if (0 == 0)
  5
else
  6;
// next 'then' with single semicolon
if (0 == 0)
  7;
else
  8;
print("[test] parsing test passed");

test("types");
check(type.check(type));
check(type.check(ptype));
check(type.check(int));
check(type(17) == "int");
check(type(3.14) == "real");
check(type(true) == "bool");
check(type("test") == "string");
check(int.check(17));
check(!int.check(1.7));
check(!int.check("test"));
check(!real.check(17));
check(real.check(1.7));
check(!real.check("test"));
check(!string.check(17));
check(!string.check(1.7));
check(string.check("test"));
check(int:17);
check(!(int:1.7));
check(!(int:"test"));
check(!(real:17));
check(real:1.7);
check(!(real:"test"));
check(!(string:17));
check(!(string:1.7));
check(string:"test");
summarize();
