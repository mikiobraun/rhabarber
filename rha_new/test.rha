// put all testing code here!

test("equalequal test");
check(17==17);
check("test"=="test");
check(void==void);
check(17!=void);
check(!is_void(15));
check("test"!=66);
check("test"!="tests");
summarize();

test("pattern test");
fib = fn (n) n*fib(n-1);
fib(0) = 1;
check(fib(5)==120);
summarize();

test("bool test");
check(!(true) == false);
check(!(false) == true);
check((true && true) == true);
check((false && true) == false);
check((true && false) == false);
check((false && false) == false);
check((true || true) == true);
check((false || true) == true);
check((true || false) == true);
check((false || false) == false);
summarize();

test("proxy tests");
a = 17;
b = proxy(\a);
check(a==b);
a = 42;
check(a==b);
a.xxx = "a new slot";
check(has(b, \xxx));
b.yyy = "another slot";
check(has(a, \yyy));
summarize();

test("arithmetic test");
check(17+42 == 59);
check(17-42 == -25);
check(17*42 == 714);
check(42/17 == 2);
summarize();

test("tuple test");
x = tuple(4);
check(x.len() == 4);
x.set(0, 42);
x.set(1, "seventeen");
check(x.get(0) == 42);
check(x.get(1) == "seventeen");
check(x.len() == 4);
summarize();

test("for loop test");
x = tuple(4);
x.set(0, 55);
x.set(1, 33);
x.set(2, 42);
x.set(3, -5);
y = 0;
for (i in x) y += i;
check(y==125);
summarize();


test("list test");
l = list();
l.append(17);
l.append(42);
y = 111;
for (x in l) y += x;
check(y == 170);
summarize();

test("return test");
// return from a function
x = (fn () { y = new(); y.a = 17; return y; z == zz })();
check(x.a == 17);
// return from a function from inside code block
x = (fn () { y = new(); y.a = 17; { return y; z == zz} })();
check(x.a == 17);
// return from a function from inside a code block inside a loop
x = (fn () { for (x in 0:17) { if (x==3) return 17} })();
check(x == 17);
summarize();

test("deliver test");
// deliver from a code block
x = { y = new(); y.a = 17; deliver y; z == zz };
check(x.a == 17);
// deliver from a loop inside a code block
x = { for (x in 0:17) if (x==3) deliver 17 }
check(x == 17);
summarize();

test("break test");
for (i in 0:5)  // break a loop
  if (i==2) break;
check(i == 2);
for (i in 0:5)  // break a loop inside a code block
  { x=18; if (i==2) break; }
check(i == 2);
check(i == 2);
summarize();

test("colon test");
x = tuple(5);
x.set(0, 5);
x.set(1, 6);
x.set(2, 7);
x.set(3, 8);
x.set(4, 9);
y = list(5:10, 10);
check(y.len() == 5);
for (i in 0:5)
  check(x.get(i) == y.shift());
summarize();

test("multiple arguments");
f = new();
f(x) = 1+1;
f(x,y) = 2+2;
f(x,y,z) = 3+3;
f() = 0;
check(f() == 0);
check(f(5,3) == 4);
check(f(1) == 2);
check(f(5,6,2) == 6);
summarize();


test("parsing");
{ x = 0 }
if (0==0) {
  1;
}
else {
  2
}
check(true);  // will count if previous expression is parsed!
// next 'then' without semicolon
if (0 == 0)
  5
else
  6;
check(true);  // will count if previous expression is parsed!
// next 'then' with single semicolon
if (0 == 0)
  7;
else
  8;
check(true);  // will count if previous expression is parsed!
summarize();

test("run file");
x = 0;
run(root, "test_run_test.rha");
check(x==1);
check(trt == "test_run_test");
check(test_run_test == 17);
run("test_run_test.rha");
check(x==2);
check(trt == "test_run_test");
check(test_run_test == 17);
summarize();

test("types");
check(type.check(type));
check(type.check(int));
check(typename(17) == "int");
check(typename(3.14) == "real");
check(typename(true) == "bool");
check(typename("test") == "string");
check(int.check(17));
check(!int.check(1.7));
check(!int.check("test"));
check(!real.check(17));
check(real.check(1.7));
check(!real.check("test"));
check(!string.check(17));
check(!string.check(1.7));
check(string.check("test"));
check(int:17);
check(!(int:1.7));
check(!(int:"test"));
check(!(real:17));
check(real:1.7);
check(!(real:"test"));
check(!(string:17));
check(!(string:1.7));
check(string:"test");
summarize();

test("overloaded");
f = new();
f(int:x) = 17;
f(real:x) = 42;
check(f(1)==17);
check(f(1.0)==42);
summarize();

test("string");
check("test"(-4) == "t");
check("test"(-3) == "e");
check("test"(-2) == "s");
check("test"(-1) == "t");
check("test"(0) == "t");
check("test"(1) == "e");
check("test"(2) == "s");
check("test"(3) == "t");
summarize();


test("matrix");
a = [1,2,3;
     4,5,6];
check((a*a')(0,1) == 32);
a(1,1) = 17;
check((a.*a)(0,1) == 4);
check((a.*a)(0,1) == 4);
summarize();

test("complex literals");
check(mat:[1,2,3,4]);
check(list:list[1,2,3,4]);
check(tuple:tuple[1,2,3,4]);
summarize();
