// what is a pattern?
//   pattern = new(type);     // in rha_init.c
//   pattern.proto = new();   // in rha_init.c
// a pattern constructor
pattern(symbol:s) = {
  p = instance(pattern);
  p.patternsymbol = s;
  return p;
}
pattern(type:x, symbol:s) = {
  p = pattern(s);
  p.patterntype = x;
  return p;
}
pattern.proto.to_string() = {
  if (this == pattern.proto)
    return "<pattern.proto>";
  s = to_string(this.patternsymbol);
  if (has(this, \patterntype))
    s = to_string(this.patterntype)+":"+s;
  return s;
}

// what is iterable?
iterable = neww(type);
iterable.check = fn (x) {
  if (!has(x, \iter)) return false;
  i = x.iter();
  if (!has(i, \done)) return false;
  if (!has(i, \next)) return false;
  if (!has(i, \get)) return false;
  return true;
}

// what is comparable?
comparable = neww(type);
comparable.check = fn (x) {
  // check here whether x can be argument of cmp
  //  try {
  //  cmp(x, x)
  // }
  //catch (xxx) {
  //  return false;
  /// }
  //return true;
  return true;
}
