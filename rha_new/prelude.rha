// (1) first pull some of the functions to the global scope

// the only stuff that exists in 'root' is:

// (1.1) right now we can't even do assignments like 'x=1'
modules.object.assign(root, \assign, modules.object.assign);

// (1.2) let's get more stuff from the object module
new    = modules.object.new;
ls     = modules.object.ls;
new    = modules.object.new;
has    = modules.object.has;
lookup = modules.object.lookup;
clone  = modules.object.clone;
addr   = modules.object.addr;
ptype  = modules.object.ptypename;
run    = modules.core.run_fn;

// functions for prules
if_fn      = modules.core.if_fn;
fn_fn      = modules.core.fn_fn;
for_fn     = modules.core.for_fn;
while_fn   = modules.core.while_fn;
try_fn     = modules.core.try_fn;
colon_fn   = modules.core.colon_fn;
literal    = modules.core.literal;
return_fn  = modules.core.return_fn;
deliver_fn = modules.core.deliver_fn;
break_fn   = modules.core.break_fn;
print      = modules.object.print_fn;

// temporarily for testing purposes (as long as we have to overloaded)
inc             = modules.object.inc;
dec             = modules.object.dec;
inc_copy        = modules.object.inc_copy;
dec_copy        = modules.object.dec_copy;
plus_fn         = modules.object.plus_fn;
neg_fn          = modules.object.neg_fn;
minus_fn        = modules.object.minus_fn;
times_fn        = modules.object.times_fn;
divide_fn       = modules.object.divide_fn;
equalequal_fn   = modules.object.equalequal_fn;
notequal_fn     = modules.object.notequal_fn;
less_fn         = modules.object.less_fn;
lessequal_fn    = modules.object.lessequal_fn;
greater_fn      = modules.object.greater_fn;
greaterequal_fn = modules.object.greaterequal_fn;
and_fn          = modules.core.and_fn;
or_fn           = modules.core.or_fn;

// code for testing
test = fn (name) {
  t = new();
  t.name = name;
  t.failure = 0;
  t.success = 0;
  t.check = fn (cond) if (cond) this.success++ else this.failure++;
  t.summarize = fn () print("[test]", this.name, 
			    this.success, "PASSED and",
			    this.failure, "FAILED");
  return t;
};

// proxy stuff
proxy = fn (s) root.modules.core.proxy_fn(this, s);


// add functions to the tuple prototype
//tuple.len = modules.tuple_fn.tuple_len;
//tuple.set = modules.tuple_fn.tuple_set;
//tuple.get = modules.tuple_fn.tuple_get;
//tuple.iterable = fn () {
//  iter = new();
//  iter.counter = 0;
//  iter.tuple = this;
//  iter.next = fn () 
//    if (counter < this.tuple.len)
//      return this.tuple.get(counter++);
//    else
//      break;
//  return iter;
//};

// list stuff
//list.len      = modules.list_fn.list_len;
//list.copy     = modules.list_fn.list_copy;
//list.append   = modules.list_fn.list_append;
//list.prepend  = modules.list_fn.list_prepend;
//list.extend   = modules.list_fn.list_extend;
//list.to_tuple = modules.list_fn.list_to_tuple;
//list.iterable = fn () {
//  iter = modules.list_fn.list_iter(this);
//  iter.next = modules.list_fn.list_next(this);
//  iter.done = modules.list_fn.list_done(this);
//  iter.get  = modules.list_fn.list_get(this);
//};
//list.iter() = listit.new(this);



// what is an integer?
//   int.check = fn (x) return ptype(x)==int;  ???

// what is a prule?
//   prule.check = fn (x) {
//     if (!has(x, \callable)) return false;
//     if (!has(x, \priority)) return false;
//     return true;
//   }

// what is a function?
// note that builtin functions should also have their stuff available
// in \callable!
//   fn.check = fn (x) {
//     if (!has(x, \callable)) return false;
//     return true;
//   }

// what is a macro?
//   macro.check = fn (x) {
//     if (!fn.check(x)) return false;
//     if (!has(x, \ismacro)) return false;
//     return true;
//   }

// what is iterable?
//   iterable.check = fn (x) {
//     if (!has(x, \iterable)) return false;
//     i = x.iterable;
//     if (!has(i, \begin)) return false;
//     if (!has(i, \done)) return false;
//     if (!has(i, \next)) return false;
//     if (!has(i, \get)) return false;
//     return true;
//   }

// what is an exception?
// any object can be an exception, however if it has the slot 'msg' it
// will be shown
